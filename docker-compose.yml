version: '3.8'

services:
  tableai-yolo-cpu:
    build:
      context: ./
      dockerfile: plugins/yolo/Dockerfile.yolo.cpu
    image: tableai-yolo-cpu:latest
    container_name: tableai-yolo-service
    ports:
      - "8001:8001"
    environment:
      - PYTHONUNBUFFERED=1
      - MODEL_CACHE_DIR=/app/models
      - PORT=8001
    volumes:
      # Cache downloaded models to avoid re-downloading
      - yolo_models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # Give time for model download on first run
    restart: unless-stopped
    networks:
      - tableai-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.yolo-api.rule=Host(`yolo.localhost`)"
      - "traefik.http.services.yolo-api.loadbalancer.server.port=8000"
    # Resource limits for CPU-only service
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
  tableai-classifier-cpu:
    build:
      context: ./
      dockerfile: plugins/classifier/Dockerfile.classifier.cpu
    image: tableai-classifier-cpu:latest
    container_name: tableai-classifier-service
    tty: true        # allocate a pseudo-TTY
    stdin_open: true
    ports:
      - "8005:8005"
    environment:
      - PYTHONUNBUFFERED=1
      - MODEL_CACHE_DIR=/app/models
      - PORT=8005
    volumes:
      # Cache downloaded models to avoid re-downloading
      - classifier_models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # Give time for model download on first run
    restart: unless-stopped
    networks:
      - tableai-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.classifier-api.rule=Host(`classifier.localhost`)"
      - "traefik.http.services.classifier-api.loadbalancer.server.port=8005"
    # Resource limits for CPU-only service
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
  tableai-detectron-cpu:
    platform: "linux/amd64"
    build:
      context: ./
      dockerfile: plugins/detectron/Dockerfile.detectron.cpu
    image: tableai-detectron-cpu:latest
    container_name: tableai-detectron-service
    ports:
      - "8002:8002"
    environment:
      - PYTHONUNBUFFERED=1
      - MODEL_CACHE_DIR=/app/models
      - PORT=8002
    volumes:
      # Cache downloaded models to avoid re-downloading
      - detectron_models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # Give time for model download on first run
    restart: unless-stopped
    networks:
      - tableai-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.detectron-api.rule=Host(`detectron.localhost`)"
      - "traefik.http.services.detectron-api.loadbalancer.server.port=8002"
    # Resource limits for CPU-only service
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
  nlm-ingestor:
    image: ghcr.io/nlmatics/nlm-ingestor:latest
    container_name: nlm-ingestor-service
    ports:
      - "8003:5001"  # exposes port 5001 as shown in Dockerfile
    environment:
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    networks:
      - tableai-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nlm-ingestor.rule=Host(`nlm-ingestor.localhost`)"
      - "traefik.http.services.nlm-ingestor.loadbalancer.server.port=5001"
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

volumes:
  yolo_models:
    driver: local
  detectron_models:
    driver: local
  classifier_models:
    driver: local

networks:
  tableai-network:
    driver: bridge
    name: tableai-network